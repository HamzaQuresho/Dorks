### **Credentials & Hardcoded Secrets**	
org:[TARGET_ORG] filename:.env "DB_PASSWORD"	– (Purpose: Hunts for database credentials in `.env` files, commonly used in local/dev environments but accidentally committed.)
org:[TARGET_ORG] extension:.p12 OR extension:.pfx	– (Purpose: Identifies leaked PKCS#12/PFX certificate bundles, which often contain private keys and CA chains.)
org:[TARGET_ORG] filename:secrets.yaml OR filename:secrets.yml "token:"	– (Purpose: Targets Kubernetes or Helm secrets files containing service account tokens or OAuth credentials.)
org:[TARGET_ORG] language:json "firebase_api_key"	– (Purpose: Finds exposed Firebase API keys in JSON config files, which can lead to data exfiltration from real-time databases.)
org:[TARGET_ORG] "BEGIN RSA PRIVATE KEY" OR "BEGIN OPENSSH PRIVATE KEY" extension:.key	– (Purpose: Detects raw private keys embedded in `.key` files, often used for SSH or TLS.)
org:[TARGET_ORG] filename:config.json "authToken"	– (Purpose: Searches for authentication tokens in generic config files used by internal tooling or CLI apps.)
org:[TARGET_ORG] path:*.tfvars "aws_secret_access_key"	- (Purpose: Searches for hardcoded AWS secret keys in Terraform variable files.)
org:[TARGET_ORG] path:*.yml "stripe_api_key"	- (Purpose: Identifies leaked Stripe API keys within YAML configuration files often used in payment integrations.)
org:[TARGET_ORG] path:*.js "bearer_token"	- (Purpose: Finds hardcoded Bearer tokens in JavaScript files that could grant unauthorized API access.)
org:[TARGET_ORG] path:*.properties "db_password"	- (Purpose: Detects database passwords embedded in Java properties files for backend services.)
org:[TARGET_ORG] path:*.json "oauth_client_secret"	- (Purpose: Uncovers OAuth client secrets in JSON files used for third-party authentications.)
org:[TARGET_ORG] path:*.env "MAIL_PASSWORD"	- (Purpose: Locates email service passwords in environment files that might expose SMTP credentials.)
org:[TARGET_ORG] language:python "private_key" extension:py	- (Purpose: Spots hardcoded private keys in Python scripts, potentially for SSH or encryption.)
org:[TARGET_ORG] path:*.conf "ldap_bind_password"	- (Purpose: Reveals LDAP bind passwords in configuration files for directory services.)
org:[TARGET_ORG] path:*.ini "redis_password"	- (Purpose: Exposes Redis database passwords in INI configuration files.)
org:[TARGET_ORG] path:tests/* "test_jwt_token"	- (Purpose: Identifies leaked JWT tokens in test suite files that could be valid in production.)
	
### **Infrastructure-as-Code (IaC) & CI/CD Misconfigurations**	
org:[TARGET_ORG] path:*.tf "sensitive = true"	– (Purpose: Flags Terraform resources explicitly marked sensitive—often a red flag for hardcoded secrets nearby.)
org:[TARGET_ORG] filename:main.tf OR filename:variables.tf "default = \""	– (Purpose: Identifies Terraform variable defaults that may contain placeholder secrets accidentally left in code.)
org:[TARGET_ORG] path:.github/workflows/ language:yaml "secrets."	– (Purpose: Maps usage of GitHub Actions secrets to assess potential secret sprawl or over-permissioned workflows.)
org:[TARGET_ORG] filename:Jenkinsfile "withCredentials"	– (Purpose: Finds Jenkins pipeline scripts that reference credentials—useful for identifying credential binding patterns or misused IDs.)
org:[TARGET_ORG] path:*.tfvars.json "password"	– (Purpose: Targets JSON-formatted Terraform variable files, which are less commonly scanned but equally prone to leaks.)
org:[TARGET_ORG] filename:bitbucket-pipelines.yml "variables:"	– (Purpose: Detects hardcoded variables in Bitbucket CI configs, which may include API keys or deployment tokens.)
org:[TARGET_ORG] path:.github/workflows/*.yml "deploy_key"	- (Purpose: Searches for deployment keys in GitHub Actions workflows that might allow unauthorized access to repositories.)
org:[TARGET_ORG] path:*.tf "s3_bucket_name" "private"	- (Purpose: Finds misconfigured private S3 bucket names in Terraform scripts exposing cloud storage details.)
org:[TARGET_ORG] filename:docker-compose.yml "environment:" "password"	- (Purpose: Detects hardcoded passwords in Docker Compose environment variables for containerized services.)
org:[TARGET_ORG] path:*.yaml "circleci" "api_token"	- (Purpose: Uncovers CircleCI API tokens in YAML files used for CI/CD pipelines.)
org:[TARGET_ORG] path:ansible/*.yml "vault_password"	- (Purpose: Identifies Ansible vault passwords or encrypted secrets mishandled in playbooks.)
org:[TARGET_ORG] filename:Jenkinsfile "credentialsId"	- (Purpose: Reveals credential IDs in Jenkins pipelines that could link to stored secrets.)
org:[TARGET_ORG] path:*.tfstate "access_key"	- (Purpose: Spots leaked access keys in Terraform state files that snapshot infrastructure.)
org:[TARGET_ORG] language:bash "travis_ci_token"	- (Purpose: Finds Travis CI tokens in bash scripts for build automation.)
org:[TARGET_ORG] path:kubernetes/*.yaml "secretName"	- (Purpose: Detects references to Kubernetes secrets in YAML manifests that might expose naming conventions.)
org:[TARGET_ORG] filename:.gitlab-ci.yml "variables:" "key"	- (Purpose: Locates sensitive variables like keys in GitLab CI configuration files.)
	
### **Sensitive Data Exposure & Internal Endpoints**	
org:[TARGET_ORG] path:**.md "internal." OR "intranet."	– (Purpose: Scans Markdown documentation (including wikis) for references to internal domains, revealing shadow IT or undocumented services.)
org:[TARGET_ORG] language:json "debug": true	– (Purpose: Finds debug-enabled configurations in production-like JSON files, which may leak stack traces or verbose error details.)
org:[TARGET_ORG] "svc.cluster.local" OR ".internal"	– (Purpose: Discovers Kubernetes service DNS names or AWS internal hostnames, exposing internal architecture.)
org:[TARGET_ORG] filename:local.settings.json "AzureWebJobsStorage"	– (Purpose: Targets Azure Functions local configs that often contain storage account connection strings.)
org:[TARGET_ORG] "X-Debug-Token" OR "X-Profiler-Token"	– (Purpose: Hunts for debug/profiler headers used in frameworks like Symfony or Laravel—can enable unauthorized profiling or tracing.)
org:[TARGET_ORG] extension:.log "Exception in thread"	– (Purpose: Finds committed log files with stack traces that may reveal internal class names, paths, or dependency versions.)
org:[TARGET_ORG] path:*.log "error" "internal_ip"	- (Purpose: Searches for verbose error logs exposing internal IP addresses.)
org:[TARGET_ORG] path:*.md "internal_hostname"	- (Purpose: Identifies internal hostnames mentioned in Markdown documentation files.)
org:[TARGET_ORG] language:go "debug_mode = true"	- (Purpose: Finds debug configurations in Go files that could leak sensitive runtime information.)
org:[TARGET_ORG] path:*.json "x-internal-endpoint"	- (Purpose: Uncovers references to internal endpoints in JSON configuration files.)
org:[TARGET_ORG] path:logs/* "session_id"	- (Purpose: Detects leaked session IDs in log files that might allow session hijacking.)
org:[TARGET_ORG] filename:README.md "staging_url"	- (Purpose: Reveals staging or internal URLs in project README files.)
org:[TARGET_ORG] path:*.sql "insert into users"	- (Purpose: Spots SQL dumps or queries exposing user data schemas.)
org:[TARGET_ORG] language:java "logger.debug" "credential"	- (Purpose: Identifies debug logs in Java code that might print credentials.)
org:[TARGET_ORG] path:*.txt "vpn_endpoint"	- (Purpose: Finds VPN or internal network endpoints in plain text files.)
org:[TARGET_ORG] path:docs/* "api_gateway_internal"	- (Purpose: Locates documentation referencing internal API gateways.)
	
	
### **Configuration Files & Service Discovery**	
org:[TARGET_ORG] filename:consul.json OR filename:vault.hcl`	– (Purpose: Identifies HashiCorp Consul or Vault config files that may contain bootstrap tokens or unseal keys.)
org:[TARGET_ORG] path:config/ extension:.yaml "hosts:"	– (Purpose: Searches YAML configs in standard config directories for lists of internal hosts or service endpoints.)
org:[TARGET_ORG] filename:docker-compose.yml "environment:"	– (Purpose: Scans Docker Compose files for environment variables that may contain credentials or internal URLs.)
org:[TARGET_ORG] filename:application-prod.yml "spring.datasource.url"	– (Purpose: Targets Spring Boot production configs for database connection strings pointing to internal RDS or on-prem DBs.)
org:[TARGET_ORG] filename:nginx.conf "server_name internal"	– (Purpose: Finds Nginx configs exposing internal virtual hosts or reverse proxy rules.)
org:[TARGET_ORG] filename:prometheus.yml "targets:"	– (Purpose: Discovers Prometheus scrape targets, revealing internal monitoring endpoints and service inventory.)
org:[TARGET_ORG] filename:.dockercfg "auth"	- (Purpose: Searches for Docker registry authentication details in configuration files.)
org:[TARGET_ORG] path:*.yaml "consul_service"	- (Purpose: Identifies Consul service discovery configurations in YAML files.)
org:[TARGET_ORG] filename:config.php "dbpasswd"	- (Purpose: Detects database passwords in PHP configuration files.)
org:[TARGET_ORG] path:*.xml "eureka_server"	- (Purpose: Finds Eureka service registry details in XML files for microservices.)
org:[TARGET_ORG] filename:.npmrc "_auth"	- (Purpose: Reveals NPM registry authentication tokens in configuration files.)
org:[TARGET_ORG] path:*.properties "zookeeper_connect"	- (Purpose: Uncovers ZooKeeper connection strings in properties files for distributed systems.)
org:[TARGET_ORG] filename:wp-config.php "DB_PASSWORD"	- (Purpose: Locates WordPress database passwords in configuration files.)
org:[TARGET_ORG] path:*.conf "etcd_endpoint"	- (Purpose: Identifies etcd key-value store endpoints in conf files.)
org:[TARGET_ORG] filename:.netrc "password"	- (Purpose: Finds netrc file passwords for remote server access.)
org:[TARGET_ORG] path:*.json "service_discovery_url"	- (Purpose: Spots URLs for service discovery in JSON configs.)
	
	
### **Mobile & Application-Specific Leaks**	
org:[TARGET_ORG] extension:.mobileconfig	– (Purpose: Detects iOS configuration profiles, which may contain Wi-Fi credentials, certificates, or MDM enrollment tokens.)
org:[TARGET_ORG] path:android/ filename:local.properties "sdk.dir"	– (Purpose: While usually benign, sometimes paired with leaked keystore passwords in adjacent files—use as a pivot point.)
org:[TARGET_ORG] filename:google-services.json "client_id"	– (Purpose: Finds Firebase/Google OAuth client IDs and API keys used in Android/iOS apps—can be abused for quota exhaustion or data access.)
org:[TARGET_ORG] filename:Info.plist "NSAppTransportSecurity"	– (Purpose: Identifies insecure ATS exceptions in iOS apps, indicating potential cleartext HTTP usage to internal endpoints.)
org:[TARGET_ORG] path:ios/ extension:.plist "password"	– (Purpose: Scans iOS property list files for hardcoded credentials in test or debug configurations.)
org:[TARGET_ORG] filename:firebase.json "hosting": { "public"	– (Purpose: Reveals Firebase hosting configs that may expose staging site paths or custom domains tied to internal environments.)
org:[TARGET_ORG] path:*.mobileconfig "payload"	- (Purpose: Searches for mobile configuration profiles exposing device management details.)
org:[TARGET_ORG] path:android/*.xml "firebase_api_key"	- (Purpose: Identifies Firebase API keys in Android XML manifest files.)
org:[TARGET_ORG] path:ios/*.plist "app_secret"	- (Purpose: Detects app secrets in iOS property list files.)
org:[TARGET_ORG] language:swift "keychain_access"	- (Purpose: Finds keychain access code in Swift files that might leak stored credentials.)
org:[TARGET_ORG] path:*.apk "decompiled" "token"	- (Purpose: Uncovers tokens in decompiled APK files or related code.)
org:[TARGET_ORG] filename:GoogleService-Info.plist "API_KEY"	- (Purpose: Reveals Google API keys in iOS Firebase configuration files.)
org:[TARGET_ORG] path:*.java "mobile_analytics_id"	- (Purpose: Identifies mobile analytics IDs in Java files for app tracking.)
org:[TARGET_ORG] path:*.kt "push_notification_key"	- (Purpose: Spots push notification keys in Kotlin files for mobile apps.)
org:[TARGET_ORG] filename:AndroidManifest.xml "permission" "internal"	- (Purpose: Detects custom internal permissions in Android manifests.)
org:[TARGET_ORG] path:*.storyboard "api_endpoint"	- (Purpose: Locates API endpoints embedded in iOS storyboard files.)
	
### **Bonus: Advanced & Obscure Vectors**	
org:[TARGET_ORG] filename:.kube/config	– (Purpose: Directly hunts for committed Kubernetes kubeconfig files—equivalent to handing over cluster admin access.)
org:[TARGET_ORG] "-----BEGIN CERTIFICATE-----" extension:.crt path:test/	– (Purpose: Finds certificates in test directories that may be valid for internal PKI or staging environments.)
org:[TARGET_ORG] filename:package-lock.json "resolved": "https://internal-nexus"	– (Purpose: Exposes internal artifact repository URLs, revealing build infrastructure and potential auth bypass surfaces.)
org:[TARGET_ORG] language:javascript "process.env." path:src/	– (Purpose: Flags direct use of environment variables in source code—may indicate secrets are expected to be injected unsafely.)
org:[TARGET_ORG] filename:.sops.yaml OR filename:.sops.json	– (Purpose: Detects Mozilla SOPS config files; if keys are also leaked, encrypted secrets can be decrypted.)
	
	
* **Private Keys & Certificates (Insightful category from X discussions on key exposures):**	
org:[TARGET_ORG] extension:pem "private"	- (Purpose: Searches for private PEM keys in certificate files.)
org:[TARGET_ORG] extension:p12 "password"	- (Purpose: Identifies password-protected PKCS12 certificate files.)
org:[TARGET_ORG] filename:id_rsa	- (Purpose: Finds SSH private keys named id_rsa.)
org:[TARGET_ORG] extension:ppk "private"	- (Purpose: Detects PuTTY private keys in PPK files.)
org:[TARGET_ORG] path:*.crt "BEGIN CERTIFICATE"	- (Purpose: Uncovers certificate files with embedded private data.)
org:[TARGET_ORG] filename:.ssh/config "IdentityFile"	- (Purpose: Reveals SSH config files pointing to private key locations.)
org:[TARGET_ORG] extension:cer "private_key"	- (Purpose: Spots CER files containing private key references.)
org:[TARGET_ORG] path:*.jks "keystorePass"	- (Purpose: Identifies Java keystore passwords in JKS files.)
org:[TARGET_ORG] filename:client.pem	- (Purpose: Locates client-side PEM certificates with potential keys.)
org:[TARGET_ORG] extension:key "BEGIN RSA PRIVATE KEY"	- (Purpose: Finds raw private key files starting with standard headers.)
	
* **Database & SQL Leaks (Insightful category from X posts on dumps and credentials):**	
org:[TARGET_ORG] extension:sql "mysql dump"	- (Purpose: Searches for MySQL database dumps containing schema and data.)
org:[TARGET_ORG] path:*.sql "password"	- (Purpose: Identifies SQL scripts with hardcoded passwords.)
org:[TARGET_ORG] filename:dump.sql "users"	- (Purpose: Detects SQL dumps exposing user tables.)
org:[TARGET_ORG] language:php "mysqli_connect" "password"	- (Purpose: Finds PHP database connections with passwords.)
org:[TARGET_ORG] path:*.yaml "mongodb_uri"	- (Purpose: Uncovers MongoDB connection URIs in YAML files.)
org:[TARGET_ORG] extension:db "credentials"	- (Purpose: Spots database files with embedded credentials.)
org:[TARGET_ORG] filename:postgres.conf "pg_password"	- (Purpose: Reveals PostgreSQL configuration with passwords.)
org:[TARGET_ORG] path:migrations/*.sql "alter table" "sensitive"	- (Purpose: Identifies migration scripts altering sensitive tables.)
org:[TARGET_ORG] language:python "sqlalchemy" "password"	- (Purpose: Detects SQLAlchemy connection strings with passwords in Python.)
org:[TARGET_ORG] filename:backup.sql "hash"	- (Purpose: Locates SQL backups containing hashed or plain credentials.)
	
